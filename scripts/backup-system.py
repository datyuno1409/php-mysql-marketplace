#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import subprocess
import datetime
import json
from pathlib import Path

class SystemBackup:
    def __init__(self):
        self.server_ip = "103.9.205.28"
        self.server_user = "root"
        self.server_password = "Next-Step@2310"
        self.backup_dir = "backups"
        self.timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        
    def create_backup_directory(self):
        """T·∫°o th∆∞ m·ª•c backup local"""
        backup_path = Path(self.backup_dir)
        backup_path.mkdir(exist_ok=True)
        
        current_backup = backup_path / f"backup_{self.timestamp}"
        current_backup.mkdir(exist_ok=True)
        
        return current_backup
    
    def backup_database(self, backup_path):
        """Sao l∆∞u database MySQL t·ª´ server"""
        print("üóÑÔ∏è ƒêang sao l∆∞u database MySQL...")
        
        # L·ªánh mysqldump tr√™n server
        dump_command = (
            "docker exec marketplace-mysql-prod mysqldump "
            "-u root -pNext-Step@2310 marketplace_db > /tmp/marketplace_backup.sql"
        )
        
        # Th·ª±c hi·ªán dump tr√™n server
        plink_dump = [
            "plink", "-ssh", f"{self.server_user}@{self.server_ip}",
            "-P", "2012", "-pw", self.server_password,
            "-batch", dump_command
        ]
        
        try:
            result = subprocess.run(plink_dump, capture_output=True, text=True, check=True)
            print("‚úÖ Database dump th√†nh c√¥ng")
            
            # Download file backup v·ªÅ local
            pscp_download = [
                "pscp", "-P", "2012", "-pw", self.server_password,
                f"{self.server_user}@{self.server_ip}:/tmp/marketplace_backup.sql",
                str(backup_path / "database_backup.sql")
            ]
            
            subprocess.run(pscp_download, check=True)
            print("‚úÖ Database backup ƒë√£ t·∫£i v·ªÅ local")
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå L·ªói backup database: {e}")
            return False
            
        return True
    
    def backup_application_files(self, backup_path):
        """Sao l∆∞u source code v√† files t·ª´ server"""
        print("üìÅ ƒêang sao l∆∞u application files...")
        
        try:
            # T·∫°o archive tr√™n server
            archive_command = (
                "cd /var/www && "
                "tar -czf /tmp/marketplace_files.tar.gz html/"
            )
            
            plink_archive = [
                "plink", "-ssh", f"{self.server_user}@{self.server_ip}",
                "-P", "2012", "-pw", self.server_password,
                "-batch", archive_command
            ]
            
            subprocess.run(plink_archive, check=True)
            print("‚úÖ Application files archive th√†nh c√¥ng")
            
            # Download archive v·ªÅ local
            pscp_download = [
                "pscp", "-P", "2012", "-pw", self.server_password,
                f"{self.server_user}@{self.server_ip}:/tmp/marketplace_files.tar.gz",
                str(backup_path / "application_files.tar.gz")
            ]
            
            subprocess.run(pscp_download, check=True)
            print("‚úÖ Application files ƒë√£ t·∫£i v·ªÅ local")
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå L·ªói backup application files: {e}")
            return False
            
        return True
    
    def backup_docker_configs(self, backup_path):
        """Sao l∆∞u Docker configurations"""
        print("üê≥ ƒêang sao l∆∞u Docker configurations...")
        
        config_files = [
            "/root/docker-compose.prod.yml",
            "/root/nginx.prod.conf",
            "/root/config.php"
        ]
        
        try:
            for config_file in config_files:
                filename = os.path.basename(config_file)
                
                pscp_download = [
                    "pscp", "-P", "2012", "-pw", self.server_password,
                    f"{self.server_user}@{self.server_ip}:{config_file}",
                    str(backup_path / filename)
                ]
                
                try:
                    subprocess.run(pscp_download, check=True)
                    print(f"‚úÖ ƒê√£ backup {filename}")
                except subprocess.CalledProcessError:
                    print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ backup {filename} (c√≥ th·ªÉ file kh√¥ng t·ªìn t·∫°i)")
            
        except Exception as e:
            print(f"‚ùå L·ªói backup Docker configs: {e}")
            return False
            
        return True
    
    def backup_docker_volumes(self, backup_path):
        """Sao l∆∞u Docker volumes data"""
        print("üíæ ƒêang sao l∆∞u Docker volumes...")
        
        try:
            # Backup MySQL data volume
            volume_command = (
                "docker run --rm -v marketplace_mysql_data_prod:/data "
                "-v /tmp:/backup alpine tar -czf /backup/mysql_volume.tar.gz -C /data ."
            )
            
            plink_volume = [
                "plink", "-ssh", f"{self.server_user}@{self.server_ip}",
                "-P", "2012", "-pw", self.server_password,
                "-batch", volume_command
            ]
            
            subprocess.run(plink_volume, check=True)
            print("‚úÖ MySQL volume backup th√†nh c√¥ng")
            
            # Download volume backup
            pscp_download = [
                "pscp", "-P", "2012", "-pw", self.server_password,
                f"{self.server_user}@{self.server_ip}:/tmp/mysql_volume.tar.gz",
                str(backup_path / "mysql_volume.tar.gz")
            ]
            
            subprocess.run(pscp_download, check=True)
            print("‚úÖ MySQL volume ƒë√£ t·∫£i v·ªÅ local")
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå L·ªói backup Docker volumes: {e}")
            return False
            
        return True
    
    def get_system_info(self, backup_path):
        """L·∫•y th√¥ng tin h·ªá th·ªëng hi·ªán t·∫°i"""
        print("‚ÑπÔ∏è ƒêang thu th·∫≠p th√¥ng tin h·ªá th·ªëng...")
        
        commands = {
            "docker_ps": "docker ps -a",
            "docker_images": "docker images",
            "docker_volumes": "docker volume ls",
            "docker_networks": "docker network ls",
            "disk_usage": "df -h",
            "memory_info": "free -h",
            "system_info": "uname -a"
        }
        
        system_info = {}
        
        for info_name, command in commands.items():
            try:
                plink_cmd = [
                    "plink", "-ssh", f"{self.server_user}@{self.server_ip}",
                    "-P", "2012", "-pw", self.server_password,
                    "-batch", command
                ]
                
                result = subprocess.run(plink_cmd, capture_output=True, text=True, check=True)
                system_info[info_name] = result.stdout.strip()
                
            except subprocess.CalledProcessError as e:
                system_info[info_name] = f"Error: {e}"
        
        # L∆∞u th√¥ng tin h·ªá th·ªëng
        with open(backup_path / "system_info.json", "w", encoding="utf-8") as f:
            json.dump(system_info, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ Th√¥ng tin h·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c l∆∞u")
        return True
    
    def create_restore_script(self, backup_path):
        """T·∫°o script kh√¥i ph·ª•c"""
        restore_script = f'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Script kh√¥i ph·ª•c h·ªá th·ªëng t·ª´ backup {self.timestamp}
# S·ª≠ d·ª•ng: python restore_system.py

import subprocess
import sys

class SystemRestore:
    def __init__(self):
        self.server_ip = "103.9.205.28"
        self.server_user = "root"
        self.server_password = "Next-Step@2310"
        self.backup_timestamp = "{self.timestamp}"
    
    def restore_database(self):
        print("üóÑÔ∏è ƒêang kh√¥i ph·ª•c database...")
        
        # Upload database backup
        pscp_upload = [
            "pscp", "-pw", self.server_password,
            "database_backup.sql",
            f"{{self.server_user}}@{{self.server_ip}}:/tmp/restore_db.sql"
        ]
        
        subprocess.run(pscp_upload, check=True)
        
        # Restore database
        restore_cmd = (
            "docker exec -i marketplace-mysql-prod mysql "
            "-u root -pNext-Step@2310 marketplace_db < /tmp/restore_db.sql"
        )
        
        plink_restore = [
            "plink", "-ssh", f"{{self.server_user}}@{{self.server_ip}}",
            "-pw", self.server_password,
            "-batch", restore_cmd
        ]
        
        subprocess.run(plink_restore, check=True)
        print("‚úÖ Database ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c")
    
    def restore_files(self):
        print("üìÅ ƒêang kh√¥i ph·ª•c application files...")
        
        # Upload files backup
        pscp_upload = [
            "pscp", "-pw", self.server_password,
            "application_files.tar.gz",
            f"{{self.server_user}}@{{self.server_ip}}:/tmp/restore_files.tar.gz"
        ]
        
        subprocess.run(pscp_upload, check=True)
        
        # Extract files
        extract_cmd = (
            "cd /var/www && "
            "rm -rf html_backup && "
            "mv html html_backup && "
            "tar -xzf /tmp/restore_files.tar.gz"
        )
        
        plink_extract = [
            "plink", "-ssh", f"{{self.server_user}}@{{self.server_ip}}",
            "-pw", self.server_password,
            "-batch", extract_cmd
        ]
        
        subprocess.run(plink_extract, check=True)
        print("‚úÖ Application files ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c")

if __name__ == "__main__":
    restore = SystemRestore()
    
    print(f"üîÑ B·∫Øt ƒë·∫ßu kh√¥i ph·ª•c h·ªá th·ªëng t·ª´ backup {{restore.backup_timestamp}}")
    
    try:
        restore.restore_database()
        restore.restore_files()
        print("‚úÖ Kh√¥i ph·ª•c h·ªá th·ªëng ho√†n t·∫•t!")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥i ph·ª•c: {{e}}")
        sys.exit(1)
'''
        
        with open(backup_path / "restore_system.py", "w", encoding="utf-8") as f:
            f.write(restore_script)
        
        print("‚úÖ Script kh√¥i ph·ª•c ƒë√£ ƒë∆∞·ª£c t·∫°o")
    
    def run_backup(self):
        """Th·ª±c hi·ªán to√†n b·ªô qu√° tr√¨nh backup"""
        print(f"üöÄ B·∫Øt ƒë·∫ßu sao l∆∞u h·ªá th·ªëng - {self.timestamp}")
        print("=" * 50)
        
        # T·∫°o th∆∞ m·ª•c backup
        backup_path = self.create_backup_directory()
        print(f"üìÅ Th∆∞ m·ª•c backup: {backup_path}")
        
        success_count = 0
        total_tasks = 5
        
        # Th·ª±c hi·ªán c√°c t√°c v·ª• backup
        if self.backup_database(backup_path):
            success_count += 1
        
        if self.backup_application_files(backup_path):
            success_count += 1
        
        if self.backup_docker_configs(backup_path):
            success_count += 1
        
        if self.backup_docker_volumes(backup_path):
            success_count += 1
        
        if self.get_system_info(backup_path):
            success_count += 1
        
        # T·∫°o script kh√¥i ph·ª•c
        self.create_restore_script(backup_path)
        
        # T·∫°o file th√¥ng tin backup
        backup_info = {
            "timestamp": self.timestamp,
            "server_ip": self.server_ip,
            "backup_path": str(backup_path),
            "success_tasks": success_count,
            "total_tasks": total_tasks,
            "status": "completed" if success_count == total_tasks else "partial"
        }
        
        with open(backup_path / "backup_info.json", "w", encoding="utf-8") as f:
            json.dump(backup_info, f, indent=2, ensure_ascii=False)
        
        print("=" * 50)
        print(f"üìä K·∫øt qu·∫£ backup: {success_count}/{total_tasks} t√°c v·ª• th√†nh c√¥ng")
        
        if success_count == total_tasks:
            print("‚úÖ Sao l∆∞u h·ªá th·ªëng ho√†n t·∫•t!")
            print(f"üìÅ Backup ƒë∆∞·ª£c l∆∞u t·∫°i: {backup_path}")
            print(f"üîÑ ƒê·ªÉ kh√¥i ph·ª•c, ch·∫°y: python {backup_path}/restore_system.py")
        else:
            print("‚ö†Ô∏è Sao l∆∞u ho√†n t·∫•t v·ªõi m·ªôt s·ªë l·ªói")
            print("üîç Ki·ªÉm tra log ƒë·ªÉ bi·∫øt chi ti·∫øt")
        
        return success_count == total_tasks

if __name__ == "__main__":
    backup = SystemBackup()
    
    try:
        success = backup.run_backup()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ùå Backup b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
        sys.exit(1)