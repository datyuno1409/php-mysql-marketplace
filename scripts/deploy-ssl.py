#!/usr/bin/env python3
import subprocess
import sys
import time
import os
from datetime import datetime

SERVER_IP = "103.9.205.28"
SSH_PORT = "2012"
SSH_PASSWORD = "Next-Step@2310"
SSH_USER = "root"
PROJECT_PATH = "/tmp/marketplace"

def run_command(command, description):
    print(f"\n[{datetime.now().strftime('%H:%M:%S')}] {description}")
    print(f"Command: {command}")
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=300)
        
        if result.stdout:
            print(f"Output: {result.stdout.strip()}")
        if result.stderr:
            print(f"Error: {result.stderr.strip()}")
            
        if result.returncode == 0:
            print(f"‚úÖ {description} - SUCCESS")
            return True
        else:
            print(f"‚ùå {description} - FAILED (Exit code: {result.returncode})")
            return False
            
    except subprocess.TimeoutExpired:
        print(f"‚ùå {description} - TIMEOUT")
        return False
    except Exception as e:
        print(f"‚ùå {description} - ERROR: {str(e)}")
        return False

def main():
    print("=" * 60)
    print("üöÄ TRI·ªÇN KHAI SSL CHO MARKETPLACE")
    print("=" * 60)
    
    # B∆∞·ªõc 1: Upload nginx.ssl.conf
    success = run_command(
        f'pscp -P {SSH_PORT} -pw "{SSH_PASSWORD}" nginx.ssl.conf {SSH_USER}@{SERVER_IP}:{PROJECT_PATH}/nginx.ssl.conf',
        "Upload nginx.ssl.conf"
    )
    if not success:
        print("‚ùå Kh√¥ng th·ªÉ upload nginx.ssl.conf")
        return False
    
    # B∆∞·ªõc 2: Upload docker-compose.prod.yml
    success = run_command(
        f'pscp -P {SSH_PORT} -pw "{SSH_PASSWORD}" docker-compose.prod.yml {SSH_USER}@{SERVER_IP}:{PROJECT_PATH}/docker-compose.prod.yml',
        "Upload docker-compose.prod.yml"
    )
    if not success:
        print("‚ùå Kh√¥ng th·ªÉ upload docker-compose.prod.yml")
        return False
    
    # B∆∞·ªõc 3: T·∫°o th∆∞ m·ª•c ssl trong project n·∫øu ch∆∞a c√≥
    success = run_command(
        f'plink -P {SSH_PORT} -pw "{SSH_PASSWORD}" {SSH_USER}@{SERVER_IP} "mkdir -p {PROJECT_PATH}/ssl"',
        "T·∫°o th∆∞ m·ª•c ssl trong project"
    )
    
    # B∆∞·ªõc 4: Copy ch·ª©ng ch·ªâ SSL t·ª´ /root/ssl v√†o project
    success = run_command(
        f'plink -P {SSH_PORT} -pw "{SSH_PASSWORD}" {SSH_USER}@{SERVER_IP} "cp /root/ssl/cert.pem {PROJECT_PATH}/ssl/ && cp /root/ssl/key.pem {PROJECT_PATH}/ssl/"',
        "Copy ch·ª©ng ch·ªâ SSL v√†o project"
    )
    if not success:
        print("‚ùå Kh√¥ng th·ªÉ copy ch·ª©ng ch·ªâ SSL")
        return False
    
    # B∆∞·ªõc 5: Ki·ªÉm tra file SSL ƒë√£ ƒë∆∞·ª£c copy
    success = run_command(
        f'plink -P {SSH_PORT} -pw "{SSH_PASSWORD}" {SSH_USER}@{SERVER_IP} "ls -la {PROJECT_PATH}/ssl/"',
        "Ki·ªÉm tra file SSL trong project"
    )
    
    # B∆∞·ªõc 6: D·ª´ng c√°c container hi·ªán t·∫°i
    success = run_command(
        f'plink -P {SSH_PORT} -pw "{SSH_PASSWORD}" {SSH_USER}@{SERVER_IP} "cd {PROJECT_PATH} && docker-compose -f docker-compose.prod.yml down"',
        "D·ª´ng c√°c container hi·ªán t·∫°i"
    )
    
    # B∆∞·ªõc 7: Kh·ªüi ƒë·ªông l·∫°i v·ªõi c·∫•u h√¨nh SSL m·ªõi
    success = run_command(
        f'plink -P {SSH_PORT} -pw "{SSH_PASSWORD}" {SSH_USER}@{SERVER_IP} "cd {PROJECT_PATH} && docker-compose -f docker-compose.prod.yml up -d"',
        "Kh·ªüi ƒë·ªông container v·ªõi SSL"
    )
    if not success:
        print("‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông container v·ªõi SSL")
        return False
    
    # B∆∞·ªõc 8: Ch·ªù container kh·ªüi ƒë·ªông
    print("\n‚è≥ Ch·ªù container kh·ªüi ƒë·ªông...")
    time.sleep(30)
    
    # B∆∞·ªõc 9: Ki·ªÉm tra tr·∫°ng th√°i container
    success = run_command(
        f'plink -P {SSH_PORT} -pw "{SSH_PASSWORD}" {SSH_USER}@{SERVER_IP} "cd {PROJECT_PATH} && docker-compose -f docker-compose.prod.yml ps"',
        "Ki·ªÉm tra tr·∫°ng th√°i container"
    )
    
    # B∆∞·ªõc 10: Ki·ªÉm tra log nginx
    success = run_command(
        f'plink -P {SSH_PORT} -pw "{SSH_PASSWORD}" {SSH_USER}@{SERVER_IP} "cd {PROJECT_PATH} && docker-compose -f docker-compose.prod.yml logs nginx | tail -20"',
        "Ki·ªÉm tra log nginx"
    )
    
    print("\n" + "=" * 60)
    print("‚úÖ TRI·ªÇN KHAI SSL HO√ÄN TH√ÄNH!")
    print("üåê Ki·ªÉm tra trang web t·∫°i: https://vn-nextstep.cftenant.com")
    print("=" * 60)
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\nüéâ Tri·ªÉn khai SSL th√†nh c√¥ng!")
            sys.exit(0)
        else:
            print("\nüí• Tri·ªÉn khai SSL th·∫•t b·∫°i!")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Tri·ªÉn khai b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• L·ªói kh√¥ng mong mu·ªën: {str(e)}")
        sys.exit(1)